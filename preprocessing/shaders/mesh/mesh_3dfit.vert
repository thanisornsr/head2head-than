
#version 450

layout (location = 0) in vec3 inPos;
layout (location = 1) in vec3 inNormal;
layout (location = 2) in vec2 inUV;
layout (location = 3) in vec3 inColor;

layout (binding = 0) uniform UBO 
{
	mat4 projection;
	mat4 model;
	vec4 lightPos;
} ubo;

layout (location = 0) out vec3 outNormal;
layout (location = 1) out vec3 outColor;
layout (location = 2) out vec2 outUV;
layout (location = 3) out vec3 outViewVec;
layout (location = 4) out vec3 outLightVec;


out gl_PerVertex
{
	vec4 gl_Position;
};

void main() 
{
	outColor = inColor;
	outUV = inUV;
    
	// custom projection, it transforms from the 3dfit image space to the Vulkan NDC space
	// NOTE: the x and y axis need to be swapped since this is how they are
	// generated by the 3dfit model
	vec4 projPos = ubo.projection * vec4(inPos.yxz, 1.f);
	projPos.w = 1.f;
	
    // account for Vulkan NDC space
    // ref https://matthewwellings.com/blog/the-new-vulkan-coordinate-system/
	//projPos.y = -projPos.y;
	projPos.z = (projPos.z + projPos.w) / 2.0f;
	
    gl_Position = projPos;
	
    // compute lighting in original coords
	outNormal = inNormal;
	vec3 lPos = ubo.lightPos.xyz;
	outLightVec = lPos - inPos;
	outViewVec = -inPos;
}